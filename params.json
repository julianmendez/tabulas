{"name":"Tabulas","tagline":"System to manage human-readable tables using files","body":"# Tabulas\r\n*System to manage human-readable tables using files*\r\n\r\n\r\n[![Build Status](https://travis-ci.org/julianmendez/tabulas.png?branch=master)](https://travis-ci.org/julianmendez/tabulas)\r\n[![Maven Central](https://maven-badges.herokuapp.com/maven-central/de.tu-dresden.inf.lat.tabulas/tabulas-parent/badge.svg)](http://search.maven.org/#search|ga|1|g%3A%22de.tu-dresden.inf.lat.tabulas%22)\r\n\r\n\r\nTabulas is a system to manage human-readable tables using files. Tabulas is an experimental semi-automatic [Scala](http://www.scala-lang.org/) reimplementation of [Tabula](http://github.com/julianmendez/tabula), which is implemented in Java.\r\nIt uses a specific type of file format that is similar to a [Java Properties](http://docs.oracle.com/javase/8/docs/api/java/util/Properties.html#load-java.io.Reader-) file, but allows defining the same property for different objects.\r\n\r\n\r\n## Download\r\n\r\n* [executable JAR file](https://sourceforge.net/projects/latitude/files/tabulas/0.1.0/tabulas-0.1.0.jar/download)\r\n* [The Central Repository](https://repo1.maven.org/maven2/de/tu-dresden/inf/lat/tabulas/)\r\n* as dependency:\r\n```xml\r\n<dependency>\r\n  <groupId>de.tu-dresden.inf.lat.tabulas</groupId>\r\n  <artifactId>tabulas-ext</artifactId>\r\n  <version>0.1.0</version>\r\n</dependency>\r\n```\r\n\r\n\r\n## Format\r\n\r\nThe Tabula format has *primitive types* and *composite types*. Unless something different is stated in the [release notes](http://github.com/julianmendez/tabula/blob/master/RELEASE-NOTES.md), the primitive types are:\r\n* `String`: any string without any newline (`'\\n'` 0x0A, `'\\r'` 0x0D), and not ending in backslash (`'\\'` 0x5C), neither in blanks (`'\\t'` 0x08, `' '` 0x20)  \r\n* `URI`: any valid Uniform Resource Identifier\r\n* `List_String`: list of space-separated words\r\n* `List_URI`: list of space-separated URIs\r\n\r\nWith this format it is possible to define one or many composite *types*. Each type is defined by its *fields*. The *instances* of each type are listed just after the type definition.\r\nThe name of a type or field can be any *identifier*. A identifier is a word that is not any of the reserved words: `type`, `def`, `new`, `id`.\r\nInstances can be identified by the field `id`.\r\n\r\nEach type is defined as follows:\r\n```properties\r\ntype = TYPE_NAME\r\n```\r\nwhere *TYPE_NAME* can be any identifier.\r\n\r\nEach type has its *fields*, defined as follow:\r\n```properties\r\ndef = \\\r\n FIELD_NAME_0:FIELD_TYPE_0 \\\r\n FIELD_NAME_1:FIELD_TYPE_1 \\\r\n...\r\n FIELD_NAME_n:FIELD_TYPE_n\r\n```\r\nwhere each *FIELD_NAME* can be any identifier,\r\nand each *FIELD_TYPE* can be any of the primitive types.\r\n\r\nThe order in which the instances are shown is defined as follows:\r\n```properties\r\norder = \\\r\n [-]FIELD_NAME_a_0 \\\r\n [-]FIELD_NAME_a_1 \\\r\n ...\r\n [-]FIELD_NAME_a_k\r\n```\r\nwhere the `-` is optional and used to denote reverse order. For example:\r\n```properties\r\norder = \\\r\n id \\\r\n -author\r\n``` \r\norders the instances by `id` (ascending) and then by author (descending).\r\n \r\nThe instances come just after the type definition, with the following syntax:\r\n```properties\r\nnew =\r\nFIELD_NAME_0 = VALUE_0\r\nFIELD_NAME_1 = VALUE_1\r\n...\r\nFIELD_NAME_n = VALUE_n\r\n```\r\nwhere each *FIELD_NAME* is one of the already declared field names in the type and each *VALUE* contains a String accoding to the field type.\r\n\r\nThe *values* can be any Tabula String. The blanks (`'\\t'` 0x08, `' '` 0x20) at the beginning and at the end are removed. To declare a multi-line value, each line must finish with backslash (`'\\'` 0x5C), except the last one. For the sake of simplicity there is no difference between a multi-line value or the concatenation of all those lines. This means that:\r\n```properties\r\nfield_name = \\\r\n a \\\r\n b \\\r\n c\r\n```\r\nis the same as\r\n```properties\r\nfield_name = a b c\r\n```\r\nHowever, the format will normalize and present them differently according to the declared type. Thus, the values of fields with type `List_String` and `List_URI` will be presented as multi-line values.\r\n\r\n\r\n## Example\r\n\r\nThis is an example of a library file. Each book record contains an identifier (`id`), a title (`title`), the authors (`authors`), a link to the abstract on the web (`web`), and a list of links to the documents (`documents`). This file is ordered by identifier.\r\n\r\n\r\n```properties\r\n# simple format 1.0.0\r\n\r\n\r\ntype = record \r\n\r\n\r\ndef = \\\r\n id:String \\\r\n title:String \\\r\n authors:List_String \\\r\n web:URI \\\r\n documents:List_URI\r\n\r\n\r\norder = \\\r\n id\r\n\r\n\r\nnew = \r\nid = arXiv:1412.2223\r\ntitle = A topological approach to non-Archimedean Mathematics\r\nauthors = \\\r\n Vieri_Benci \\\r\n Lorenzo_Luperi_Baglini\r\nweb = http://arxiv.org/abs/1412.2223\r\ndocuments = \\\r\n http://arxiv.org/pdf/1412.2223#pdf \\\r\n http://arxiv.org/ps/1412.2223#ps \\\r\n http://arxiv.org/format/1412.2223#other\r\n\r\n\r\nnew = \r\nid = arXiv:1412.3313\r\ntitle = Infinitary stability theory\r\nauthors = \\\r\n Sebastien_Vasey\r\nweb = http://arxiv.org/abs/1412.3313\r\ndocuments = \\\r\n http://arxiv.org/pdf/1412.3313#pdf \\\r\n http://arxiv.org/ps/1412.3313#ps \\\r\n http://arxiv.org/format/1412.3313#other\r\n\r\n\r\n```\r\n\r\n\r\n## Source code\r\n\r\nTo clone and compile the project:\r\n```\r\n$ git clone https://github.com/julianmendez/tabulas.git\r\n$ cd tabulas\r\n$ mvn clean install\r\n```\r\nThe created executable library, its sources, and its Javadoc will be in `tabulas-distribution/target`.\r\nThis executable JAR file requires the [Scala library](http://search.maven.org/#search|gav|1|g%3A%22org.scala-lang%22%20AND%20a%3A%22scala-library%22) in the same directory. The required version is shown in the [release notes](http://github.com/julianmendez/tabulas/blob/master/RELEASE-NOTES.md).\r\n\r\nTo compile the project offline, first download the dependencies:\r\n```\r\n$ mvn dependency:go-offline\r\n```\r\nand once offline, use:\r\n```\r\n$ mvn --offline clean install\r\n```\r\n\r\nThe bundles uploaded to [Sonatype](https://oss.sonatype.org/) are created with:\r\n```\r\n$ mvn clean install -DperformRelease=true\r\n```\r\nand then on each module:\r\n```\r\n$ cd target\r\n$ jar -cf bundle.jar tabulas-*\r\n```\r\nand on the main directory:\r\n```\r\n$ cd target\r\n$ jar -cf bundle.jar tabulas-parent-*\r\n```\r\n\r\nThe version number is updated with:\r\n```\r\n$ mvn versions:set -DnewVersion=NEW_VERSION\r\n```\r\nwhere *NEW_VERSION* is the new version.\r\n\r\n\r\n## Author\r\n\r\n[Julian Mendez](http://lat.inf.tu-dresden.de/~mendez/)\r\n\r\n\r\n## License\r\n\r\nThis software is distributed under the [Apache License Version 2.0](http://www.apache.org/licenses/LICENSE-2.0.txt).\r\n\r\n\r\n## Release notes\r\n\r\nSee [release notes](http://github.com/julianmendez/tabulas/blob/master/RELEASE-NOTES.md).\r\n\r\n\r\n## Contact\r\n\r\nIn case you need more information, please contact @julianmendez .\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}